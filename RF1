#CODES FOR RF1 MODEL

#importing libraries

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
import math
from sklearn.metrics import explained_variance_score
import xgboost as xgb
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import StandardScaler

%matplotlib inline

#Uploading the datasets

data13 = pd.read_csv('C://Users//ASUSNB//Desktop//THesis//Data//Yillik//YillikFiltreli//kiraci13.csv', sep = ";")
data14 = pd.read_csv('C://Users//ASUSNB//Desktop//THesis//Data//Yillik//YillikFiltreli//kiraci14.csv', sep = ";")
data15 = pd.read_csv('C://Users//ASUSNB//Desktop//THesis//Data//Yillik//YillikFiltreli//kiraci15.csv', sep = ";")
data16 = pd.read_csv('C://Users//ASUSNB//Desktop//THesis//Data//Yillik//YillikFiltreli//kiraci16.csv', sep = ";")
data17 = pd.read_csv('C://Users//ASUSNB//Desktop//THesis//Data//Yillik//YillikFiltreli//kiraci17.csv', sep = ";")
data18 = pd.read_csv('C://Users//ASUSNB//Desktop//THesis//Data//Yillik//YillikFiltreli//kiraci18.csv', sep = ";")

#Imputation - filling missing values with group modes of each year

datas = [data13, data14, data15, data16, data17, data18]
datalar = [i for i in datas]
for i in datas:
    i['RealtyResidenceID'].fillna(i.RealtyResidenceID.mode()[0], inplace = True)
    i['RealtyPublishID'].fillna(i.RealtyPublishID.mode()[0], inplace = True)
    i['RealtyRoom'].fillna(i.RealtyRoom.mode()[0], inplace = True)
    i['RealtyFloorCount'].fillna(i.RealtyFloorCount.mode()[0], inplace = True)
    i['RealtyFloorID'].fillna(i.RealtyFloorID.mode()[0], inplace = True)
    i['RealtyAge'].fillna(i.RealtyAge.mode()[0], inplace = True)
    i['RealtyFuelID'].fillna(i.RealtyFuelID.mode()[0], inplace = True)
    i['RealtyBuildID'].fillna(i.RealtyBuildID.mode()[0], inplace = True)
    i['RealtyBuildStateID'].fillna(i.RealtyBuildStateID.mode()[0], inplace = True)
    i['RealtyUsageID'].fillna(i.RealtyUsageID.mode()[0], inplace = True)
    i['RealtyIsStudentOrSingle'].fillna(i.RealtyIsStudentOrSingle.mode()[0], inplace = True)
    i['RealtyPriceShow'].fillna(i.RealtyPriceShow.mode()[0], inplace = True)
    i['RealtyIsHousingComplex'].fillna(i.RealtyIsHousingComplex.mode()[0], inplace = True)
    i['RealtySubCategoryID'].fillna(i.RealtySubCategoryID.mode()[0], inplace = True)
    i['RealtyLivingRoom'].fillna(i.RealtyLivingRoom.mode()[0], inplace = True)
    i['RealtyBathroom'].fillna(i.RealtyBathroom.mode()[0], inplace = True)
    i['RealtySqm'].fillna(i.RealtySqm.mode()[0], inplace = True)
    i['RealtyHeatingID'].fillna(i.RealtyHeatingID.mode()[0], inplace=True)
    
#Checking one dataset if it is imputed

data13.info()

#Specifying the data types of variables. This is process is necessary due to subcategories with numbers

datas = [data13, data14, data15, data16, data17, data18]
datalar = [i for i in datas]
for i in datas:
    i.RealtyEndDateTime = i.RealtyEndDateTime.astype('object')
    i.PriceTL = i.PriceTL.astype('float64')
    i.RealtySubCategoryID = i.RealtySubCategoryID.astype('object')
    i.RealtyPublishID = i.RealtyPublishID.astype('object')
    i.RealtyResidenceID = i.RealtyResidenceID.astype('object')
    i.RealtyRoom = i.RealtyRoom.astype('int64')
    i.RealtyLivingRoom = i.RealtyLivingRoom.astype('int64')
    i.RealtyBathroom = i.RealtyBathroom.astype('int64')
    i.RealtySqm = i.RealtySqm.astype('float64')
    i.RealtyFloorCount = i.RealtyFloorCount.astype('int64')
    i.RealtyFloorID = i.RealtyFloorID.astype('object')
    i.RealtyAge = i.RealtyAge.astype('int64')
    i.RealtyHeatingID = i.RealtyHeatingID.astype('object')
    i.RealtyFuelID = i.RealtyFuelID.astype('object')
    i.RealtyBuildID = i.RealtyBuildID.astype('object')
    i.RealtyBuildStateID = i.RealtyBuildStateID.astype('object')
    i.RealtyUsageID = i.RealtyUsageID.astype('object')
    i.RealtyIsStudentOrSingle = i.RealtyIsStudentOrSingle.astype('object')
    i.RealtyCloseID = i.RealtyCloseID.astype('object')
    i.RealtyMapLatitude = i.RealtyMapLatitude.astype('float64')
    i.RealtyMapLongtitude = i.RealtyMapLongtitude.astype('float64')
    i.RealtyPriceShow = i.RealtyPriceShow.astype('object')
    i.RealtyCloseID = i.RealtyCloseID.astype('object')
    i.RealtyIsHousingComplex = i.RealtyIsHousingComplex.astype('object')
    i.DistrictID = i.DistrictID.astype('object')
    i.DistrictName = i.DistrictName.astype('object')
    i.RealtyPriceCurrencyID = i.RealtyPriceCurrencyID.astype('object')
    i.CountyID = i.CountyID.astype('object')
    i.CountyName = i.CountyName.astype('object')
    i.Month = i.Month.astype('object')
    i.Year = i.Year.astype('object')
    i.Mortgage = i.Mortgage.astype('float64')
    i.HousePriceIndex = i.HousePriceIndex.astype('float64')
    i.Metrobus = i.Metrobus.astype('float64')
    i.Metro = i.Metro.astype('float64')
    i.UFE = i.UFE.astype('float64')
    i.SqmPrice = i.SqmPrice.astype('float64')
